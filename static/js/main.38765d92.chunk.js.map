{"version":3,"sources":["config.js","views/LoginPageView.js","components/AttendanceCard.js","views/HomePageView.js","views/AddNewClassForm.js","components/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["config","PROXY_URL","process","BASEPATH","LoginPageView","props","state","onSuccessfulLogin","className","clientId","buttonText","onSuccess","response","React","Component","AttendanceCard","courseName","courseCode","attendClass","classesAttended","totalClasses","console","log","requestOptions","method","params","Cookies","get","url","data","this","axios","then","resp","setState","catch","error","Card","CardBody","CardTitle","tag","CardSubtitle","CardText","Progress","multi","bar","value","max","color","Row","Col","Button","onClick","bunkClass","HomePageView","cards","map","course","index","sm","AddClass","formSubmittedSuccessfully","handleChange","bind","handleSubmit","event","name","target","preventDefault","to","Form","onSubmit","FormGroup","Label","for","Input","type","id","onChange","NavBar","isUserLoggedIn","Navbar","light","expand","NavbarBrand","href","Nav","NavItem","NavLink","onLogoutSuccess","onLogout","App","localStorage","getItem","setItem","JSON","parse","requestOption","headers","sessionId","set","Fragment","logoutSucceed","basename","path","loginSucceed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38765d92.chunk.js","sourcesContent":["const config = {\n  PROXY_URL: process.env.REACT_APP_PROXY_URL,\n  BASEPATH: process.env.REACT_APP_BASE_PATH,\n};\n\nexport default config;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './LoginPageView.css';\n\nimport {GoogleLogin} from 'react-google-login';\n\n\n/**\n * The layout shown to a user who is not logged in\n */\nclass LoginPageView extends React.Component {\n  /**\n   * @param {Props} props Expected to recieve a callback function to notify\n   *    successful login\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      onSuccessfulLogin: props.onSuccessfulLogin,\n    };\n  }\n\n\n  /**\n   * @return {string} LoginPageView's HTML\n   */\n  render() {\n    return (\n      <div className=\"flex-container\">\n        <GoogleLogin\n          // eslint-disable-next-line max-len\n          clientId=\"724928841047-qeoov5rpo41njs7e09moms868eknu2fp.apps.googleusercontent.com\"\n          buttonText=\"Login\"\n          onSuccess={(response) => {\n            this.state.onSuccessfulLogin(response);\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nLoginPageView.propTypes={\n  onSuccessfulLogin: PropTypes.func,\n};\n\nexport default LoginPageView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Card, CardText, CardBody,\n  CardTitle, CardSubtitle, Button, Progress,\n  Row, Col,\n} from 'reactstrap';\nimport Cookies from 'js-cookie';\nimport axios from 'axios';\nimport config from '../config.js';\n\n\n/**\n * Defines the card component used to display each course's attendance stats\n */\nclass AttendanceCard extends React.Component {\n  /**\n   * @param {Props} props Course details are passed as props during creation\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      courseName: props.courseName,\n      courseCode: props.courseCode,\n      attendClass: props.classesAttended,\n      totalClasses: props.totalClasses,\n    };\n  }\n\n\n  /**\n   * This function is used to notify the API server to update the attendance\n   *    data of the course when an user clicks \"Attend Class\" button.\n   */\n  attendClass() {\n    console.log('Function Call: AttendanceCard.js: attendClass()');\n\n    const requestOptions = {\n      method: 'POST',\n      params: {'session_id': Cookies.get('bunkalog_session_id')},\n      url: config.PROXY_URL + '/attend-class',\n      data: {\n        courseCode: this.state.courseCode,\n      },\n    };\n\n    axios(requestOptions)\n        .then( (response) => {\n          axios.get(config.PROXY_URL + '/user/course',\n              {params: {\n                'session_id': Cookies.get('bunkalog_session_id'),\n                'courseCode': this.state.courseCode,\n              }})\n              .then( (response) => {\n                const resp = response.data;\n                // console.log(resp);\n                this.setState(\n                    {\n                      attendClass: resp['classesAttended'],\n                      totalClasses: resp['totalClasses'],\n                    },\n                );\n              })\n              .catch( (error) => {\n                console.log(error);\n              });\n        })\n        .catch( (error) => {\n          console.log(error);\n        });\n  }\n\n\n  /**\n   * This function is used to notify the API server to update the attendance\n   *    data of the course when an user clicks \"Bunk Class\" button.\n   */\n  bunkClass() {\n    console.log('Function Call: AttendanceCard.js: bunkClass()');\n\n    const requestOptions = {\n      method: 'POST',\n      params: {'session_id': Cookies.get('bunkalog_session_id')},\n      url: config.PROXY_URL + '/bunk-class',\n      data: {\n        courseCode: this.state.courseCode,\n      },\n    };\n\n    axios(requestOptions)\n        .then( (response) => {\n          axios.get(config.PROXY_URL + '/user/course',\n              {params: {\n                'session_id': Cookies.get('bunkalog_session_id'),\n                'courseCode': this.state.courseCode,\n              }})\n              .then( (response) => {\n                const resp = response.data;\n                // console.log(resp);\n                this.setState(\n                    {\n                      attendClass: resp['classesAttended'],\n                      totalClasses: resp['totalClasses'],\n                    },\n                );\n              })\n              .catch( (error) => {\n                console.log(error);\n              });\n        })\n        .catch( (error) => {\n          console.log(error);\n        });\n  }\n\n\n  /**\n   * @return {string} AttendanceCard's HTML\n   */\n  render() {\n    console.log('Function Call: AttendanceCard.js: render()');\n\n    return (\n      <div>\n        <Card>\n          <CardBody>\n            <CardTitle tag=\"h5\">{this.state.courseName}</CardTitle>\n            <CardSubtitle tag=\"h6\" className=\"mb-2 text-muted\">\n              {this.state.courseCode}\n            </CardSubtitle>\n            <CardText>\n              Attended {this.state.attendClass} out of\n              {this.state.totalClasses} classes\n            </CardText>\n          </CardBody>\n          <CardBody>\n            <Progress multi >\n              <Progress bar\n                value={this.state.attendClass} max={this.state.totalClasses} />\n              <Progress bar\n                value={this.state.totalClasses - this.state.attendClass}\n                color=\"danger\" max={this.state.totalClasses} />\n            </Progress>\n          </CardBody>\n          <CardBody>\n            <Row>\n              <Col>\n                <Button onClick={() => this.attendClass() }>\n                Attend Next Class\n                </Button>\n              </Col>\n              <Col>\n                <Button onClick={ () => this.bunkClass() }>\n                Bunk Next Class\n                </Button>\n              </Col>\n              <Col><Button>Class Cancelled</Button></Col>\n            </Row>\n          </CardBody>\n        </Card>\n      </div>\n    );\n  }\n};\n\nAttendanceCard.propTypes = {\n  courseName: PropTypes.string,\n  courseCode: PropTypes.string.isRequired,\n  classesAttended: PropTypes.any,\n  totalClasses: PropTypes.any,\n};\n\nexport default AttendanceCard;\n","import React from 'react';\nimport AttendanceCard from '../components/AttendanceCard.js';\n\nimport axios from 'axios';\nimport config from '../config.js';\nimport Cookies from 'js-cookie';\n\nimport {Row, Col} from 'reactstrap';\n\n\n/**\n * The default layout shown when a user is logged in. Displays all attendance\n * cards.\n */\nclass HomePageView extends React.Component {\n  /**\n   * @param {Props} props No props expected\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {\n        'data': [],\n      },\n    };\n  }\n\n\n  /**\n   * Used to fetch all attendance data of a user from API server when component\n   * is mounted\n   */\n  componentDidMount() {\n    // console.log(Cookies.get('bunkalog_session_id'));\n    console.log('Function Call: HomePageView.js: componentDidMount()');\n\n    axios.get(config.PROXY_URL + '/user',\n        {params: {'session_id': Cookies.get('bunkalog_session_id')}})\n        .then( (response) => {\n          this.setState({data: response});\n        })\n        .catch( (error) => {\n          console.log(error);\n        });\n  }\n\n\n  /**\n   * @return {string} HomePageView's HTML\n   */\n  render() {\n    console.log('Function Call: HomePageView.js: render()');\n\n    const renderData = this.state.data['data'];\n    const cards = renderData.map(function(course, index) {\n      return (\n        <Col key={index}>\n          <AttendanceCard courseName={course['courseName']}\n            courseCode={course['courseCode']}\n            classesAttended={course['classesAttended']}\n            totalClasses={course['totalClasses']} />\n        </Col>\n      );\n    });\n\n    return (\n      <div className=\"App\">\n        <Row sm=\"3\">\n          {cards}\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default HomePageView;\n","import React from 'react';\nimport config from '../config.js';\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nimport {Button, Form, FormGroup, Label, Input} from 'reactstrap';\nimport {Redirect} from 'react-router-dom';\n\n\n/**\n * The layout shown when user wants to add a new course to track.\n * Form implemented as a controlled component.\n */\nclass AddClass extends React.Component {\n  /**\n   * @param {Props} props No props are expected\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      courseName: '',\n      courseCode: '',\n      classesAttended: 0,\n      totalClasses: 0,\n      formSubmittedSuccessfully: false,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n\n  /**\n   * Called when input is recieved on form's fields\n   * @param {Object} event Contains details on what input event occured\n   */\n  handleChange(event) {\n    const name = event.target.name;\n    const value = event.target.value;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n\n  /**\n   * Called when submit button is clicked\n   * @param {Object} event Contains details on what input event occured\n   */\n  handleSubmit(event) {\n    const requestOptions = {\n      method: 'POST',\n      params: {'session_id': Cookies.get('bunkalog_session_id')},\n      url: config.PROXY_URL + '/add-class',\n      data: this.state,\n    };\n\n    axios(requestOptions)\n        .then(function(response) {\n          console.log(response);\n          this.setState({formSubmittedSuccessfully: true});\n        }.bind(this))\n        .catch(function(error) {\n          console.log(error);\n        });\n\n    event.preventDefault();\n  }\n\n\n  /**\n   * @return {string} Form's HTML\n   */\n  render() {\n    if (this.state.formSubmittedSuccessfully) {\n      return (\n        <Redirect to=\"\" />\n      );\n    }\n\n    return (\n      <Form onSubmit={this.handleSubmit} >\n\n        <FormGroup>\n          <Label for=\"courseName\">Course Name</Label>\n          <Input type=\"text\" name=\"courseName\" value={this.state.courseName}\n            id=\"courseName\" onChange={this.handleChange} />\n        </FormGroup>\n\n        <FormGroup>\n          <Label for=\"courseCode\">Course Code</Label>\n          <Input type=\"text\" name=\"courseCode\" value={this.state.courseCode}\n            id=\"courseCode\" onChange={this.handleChange} />\n        </FormGroup>\n\n        <FormGroup>\n          <Label for=\"classesAttended\">Classes Attended</Label>\n          <Input type=\"number\" name=\"classesAttended\"\n            value={this.state.classesAttended}\n            id=\"classesAttended\" onChange={this.handleChange} />\n        </FormGroup>\n\n        <FormGroup>\n          <Label for=\"totalClasses\">Total Classes</Label>\n          <Input type=\"number\" name=\"totalClasses\"\n            value={this.state.totalClasses}\n            id=\"totalClasses\" onChange={this.handleChange} />\n        </FormGroup>\n\n        <Button type=\"Submit\">\n        Add Class\n        </Button>\n      </Form>\n    );\n  }\n}\n\nexport default AddClass;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {GoogleLogout} from 'react-google-login';\nimport config from '../config.js';\n\nimport {\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n} from 'reactstrap';\n\n\n/**\n * Defines the navbar component used in the app\n * @param {Props} props Used to know if user is logged in or not. Info is used\n *    to render a logout button when logged in\n * @return {string} NavBar's HTML\n */\nfunction NavBar(props) {\n  console.log('Function Call: NavBar.js: render()');\n  console.log('Variable Value Check: NavBar.js: props.isUserLoggedIn ' +\n    props.isUserLoggedIn);\n\n  return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href={config.BASEPATH}>bunkalog</NavbarBrand>\n        { (props.isUserLoggedIn) &&\n          <Nav>\n            <NavItem>\n              <NavLink href={config.BASEPATH + '#/add-new-class'}>\n                Add New Class\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <GoogleLogout\n                // eslint-disable-next-line max-len\n                clientId=\"724928841047-qeoov5rpo41njs7e09moms868eknu2fp.apps.googleusercontent.com\"\n                buttonText=\"Logout\"\n                onLogoutSuccess={() => props.onLogout()}\n              />\n            </NavItem>\n          </Nav>\n        }\n      </Navbar>\n    </div>\n  );\n}\n\n/**\n * @prop {Object} propTypes Props passed to the component\n * @prop {bool} propTypes.isUserLoggedIn Indicates the authentication status\n *    of the user\n * @prop {func} propTypes.onLogout Callback function called when user\n *    successfully logs out\n */\nNavBar.propTypes={\n  isUserLoggedIn: PropTypes.bool,\n  onLogout: PropTypes.func,\n};\n\nexport default NavBar;\n","import React from 'react';\n\nimport axios from 'axios';\nimport config from './config.js';\nimport Cookies from 'js-cookie';\n\nimport {\n  HashRouter as Router,\n  Redirect,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nimport LoginPageView from './views/LoginPageView.js';\nimport HomePageView from './views/HomePageView.js';\nimport AddNewClassView from './views/AddNewClassForm.js';\n\nimport NavBar from './components/NavBar.js';\n\n\n/**\n * The main app component\n */\nclass App extends React.Component {\n  /**\n   * @param {Props} props No props are expected\n   */\n  constructor(props) {\n    super(props);\n\n    if (localStorage.getItem('isUserLoggedIn') === null) {\n      this.state = {\n        isUserLoggedIn: false,\n      };\n      localStorage.setItem('isUserLoggedIn', false);\n    } else {\n      this.state = {\n        isUserLoggedIn: JSON.parse(localStorage.getItem('isUserLoggedIn')),\n      };\n    }\n  }\n\n\n  /**\n   * This function is called after successful authentication with Google to\n   *    notify the API server about the authentication\n   * @param {GoogleUser} response The response object recieved from Google on\n   *    successful authentication\n   */\n  loginSucceed(response) {\n    console.log('Function Call: App.js: loginSucceed()');\n    // console.log(response);\n\n    const requestOption = {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      url: config.PROXY_URL + '/login',\n      data: {response},\n    };\n\n    axios(requestOption)\n        .then(function(response) {\n          // console.log(response.data);\n          const sessionId = response.data;\n          // console.log(sessionId);\n          // console.log('response' + response);\n          Cookies.set('bunkalog_session_id', sessionId);\n\n          this.setState({isUserLoggedIn: true});\n          localStorage.setItem('isUserLoggedIn', true);\n        }.bind(this))\n        .catch(function(error) {\n          console.log(error);\n        });\n  }\n\n\n  /**\n   * This function is called after successful logout with Google account. It\n   *    notifies the API server of the logout.\n   */\n  logoutSucceed() {\n    console.log('Function Call: App.js: logoutSucceed()');\n\n    this.setState({isUserLoggedIn: false});\n    localStorage.setItem('isUserLoggedIn', false);\n\n    const requestOption = {\n      method: 'POST',\n      params: {'session_id': Cookies.get('bunkalog_session_id')},\n      url: config.PROXY_URL + '/logout',\n    };\n\n    axios(requestOption)\n        .then(function(response) {\n          console.log(response);\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n  }\n\n\n  /**\n   * Renders the app\n   * @return {string} The app's HTML\n   */\n  render() {\n    console.log('Function Call: App.js: render()');\n\n    const isUserLoggedIn = this.state.isUserLoggedIn;\n    console.log('Variable Value Check: App.js: isUserLoggedIn ' +\n      isUserLoggedIn);\n\n    return (\n      <React.Fragment>\n        <NavBar isUserLoggedIn={isUserLoggedIn}\n          onLogout={() => this.logoutSucceed()} />\n\n        <Router basename=\"/\">\n          <Switch>\n            <Route path=\"/login\">\n              {\n                (isUserLoggedIn &&\n                <Redirect to=\"/\" />)\n              }\n              <LoginPageView\n                onSuccessfulLogin={(response) => this.loginSucceed(response)} />\n            </Route>\n            <Route path=\"/add-new-class\">\n              <AddNewClassView />\n            </Route>\n            <Route path=\"/\">\n              { (!isUserLoggedIn) &&\n              <Redirect to=\"login\" />\n              }\n              <HomePageView />\n            </Route>\n          </Switch>\n        </Router>\n      </React.Fragment>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}